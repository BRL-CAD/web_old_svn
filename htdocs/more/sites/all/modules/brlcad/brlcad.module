<?php // $Id$

define (BRLCAD_NODETYPE, 'model');

/**
 * Implementation of hook_perm
 */
function brlcad_perm() {
  return array('edit metadata');
}


/**
 * Implementation of hook_menu
 */
function brlcad_menu($may_cache) {
  $links = array();
  if($may_cache) {
      
  } else {
    $links[] = array(
      'path' => 'admin/content/brlcad',
      'title' => t('BRL-CAD'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('brlcad_general_settings'),
    );
  }
  return $links;
}

/**
 * Implementation of hook_cron
 */
function brlcad_cron() {
  brlcad_process_nodes();
}

/**
 * General settings form for BRL-CAD.
 */
function brlcad_general_settings() {
  $flags = flag_get_flags('node', BRLCAD_NODETYPE);
  foreach($flags as $flag => $data) {
    $flags[$flag] = $data->title;
  }
  $form = array();
  $form['system'] = array(
    '#type' => 'fieldset',
    '#title' => t('BRL-CAD system'),
    '#tree' => false,
  );
  $form['system']['brlcad_version'] = array(
    '#type' => 'select',
    '#title' => t('Version'),
    '#options' => _brlcad_supported_versions(),
    '#default_value' => variable_get('brlcad_version', '7.14'),
    '#required' => true,
  );
  $form['system']['brlcad_bin_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to binaries'),
    '#default_value' => variable_get('brlcad_bin_path', '/usr/brlcad/bin'),
    '#required' => true,
  );
  $form['system']['brlcad_processing_flag'] = array(
    '#title' => t('BRL-CAD processing'),  
    '#type' => 'select',
    '#options' => $flags,
    '#default_value' => variable_get('brlcad_processing_flag', ''),
    '#description' => t('Select the flag which marks the nodes that require BRL-CAD specific processing.'),
  );
  $form['raytrace'] = array(
    '#type' => 'fieldset',
    '#title' => t('Raytracing'),
    '#tree' => false,
  );
  $form['raytrace']['brlcad_raytrace_ae'] = array(
    '#type' => 'textarea',
    '#title' => 'Views',
    '#description' => t('Enter raytracing azimuth elevation (and optionally twist) tuples for raytracing, one per line. An image will be generated for each tuple.'),
    '#default_value' => variable_get('brlcad_raytrace_ae', ''),
  );
  $form['raytrace']['brlcad_raytrace_size'] = array(
    '#type' => 'textfield',
    '#title' => 'Size',
    '#description' => t('Enter number of pixels of the image.'),
    '#default_value' => variable_get('brlcad_raytrace_size', 512),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_nodeapi
 */
function brlcad_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if($node->type != BRLCAD_NODETYPE) {
    return;
  }
  switch($op) {
    default:
      break;
    case 'validate':
      // force a model submission for new nodes, but not for old ones
      if(empty($node->nid) && empty($node->field_original_file)) {
        form_set_error('field_original_file', t('@field is required. Please upload a file.', array('@field' => 'Model file')));
      }
      break;
    case 'submit':
      if(empty($node->nid)) {
      	// this this is a new node, it will require processing
      	$node->brlcad_processing = true;
      	
        // delete model metadata (just to be safe)
      	$node->field_title[0]['value'] = '';
      	$node->field_render_objects[0]['value'] = '';
      	
      } else {
      	// if this is an updated node, load the old version (from cache)
        $node_current = node_load($node->nid);
        
        // if the model file changed, it will require processing
        if(empty($node->field_original_file[0]['fid']) || $node->field_original_file[0]['fid'] != $node_current->field_original_file[0]['fid']) {
          $node->brlcad_processing = true;
          
          // delete model data
          $node->field_title[0]['value'] = '';
          $node->field_render_objects[0]['value'] = '';
          
          // delete the old BRLCAD model file
          if(!empty($node->field_model_file[0])) {
          	$node->field_model_file[0]['delete'] = true;
          }
        }
        
        // if the rendering objects list changed, it will require processing
        if($node->field_render_objects != $node_current->field_render_objects) {
          $node->brlcad_processing = true;
        }
      }
      break;
    case 'insert':
      // flag the node if it the node requires processing
      if(!empty($node->brlcad_processing)) {
        brlcad_processing_flag($node, true);
      }
      break;
    case 'update':
      // flag the node if it the node requires processing
      if(!empty($node->brlcad_processing)) {
        brlcad_processing_flag($node, true);
      }
      break;
    case 'view_no':
      dvm(brlcad_objects_list($node->field_objects[0]['value']));
      dvm($node->field_render_objects);
      break;
  }
}

function brlcad_processing_flag(&$node, $enable_flag) {
  $flag = flag_get_flag(variable_get('brlcad_processing_flag', '')); 
  if (!$flag || $flag->is_flagged($node->nid) == $enable_flag) {
    // Flag does not exist.
    return FALSE;
  }
  if($enable_flag) {
    drupal_set_message(t('Your model was queued for further processing with BRL-CAD tools (raytracing, metadata extraction, etc). Upon completion, it will be updated with additional data.'));
    return $flag->flag('flag', $node->nid, _brlcad_fakeuser());
  } else {
    return $flag->flag('unflag', $node->nid, _brlcad_fakeuser());
  }
}

/**
 * Implementation of hook_alter
 */
function brlcad_form_alter($form_id, &$form) {
  if($form_id != BRLCAD_NODETYPE . '_node_form' || arg(0) != 'node') {
    return;
  }
  
  // hide additional file fields
  unset($form['group_files']['field_model_file']);
  
  if(is_numeric(arg(1))) {
    // this is an existing node
    
    // hide uneditable fields
    unset($form['group_metadata']['field_units']);
    unset($form['group_metadata']['field_dbversion']);
    unset($form['group_metadata']['field_summary']);
    unset($form['group_metadata']['field_objects']);
    
    // hide render objects field if it's not useful
    if(empty($node->field_render_objects)) {
      unset($form['group_metadata']['field_render_objects']);
    }

    // the user can't edit metadata
    if(!user_access('edit metadata')) {
      if(empty($node->field_render_objects)) {
        unset($form['group_metadata']);
      } else {
        unset($form['group_metadata']['field_title']);
      }
    }
  } else {
    // this is a new node, hide all metadata
    unset($form['group_metadata']);
  }
}

/**
 * Process nodes marked for BRLCAD processing. 
 */
function brlcad_process_nodes() {
  $processingflag = variable_get('brlcad_processing_flag', '');
  $flags = flag_get_user_flags('node', null, 0);
  if(empty($flags[$processingflag])) {
    return;
  }
  foreach($flags[$processingflag] as $nid => $flag) {
    $node = node_load($nid);
    brlcad_process_node($node);
    node_save($node);
  }
}

/**
 * Converts a generic model to a BRLCAD model.
 * @param $node object containin model node data 
 */
function brlcad_convert_models(&$node) {
  $extension = pathinfo($node->field_original_file[0]['filename'], PATHINFO_EXTENSION);
  if($extension == 'g') {
    $node->field_model_file[0] = $node->field_original_file[0];
    $node->field_original_file[0] = array('delete' => true);
    return;
  }
  $newfile = tempnam(realpath(file_directory_temp()), 'rtimg_');
}

/**
 * Does BRLCAD processing on a node.
 * @param object $node node to process
 */
function brlcad_process_node(&$node) {
  brlcad_processing_flag($node, false);
  
  brlcad_convert_models($node);
  
  // delete old data
  $node->field_dbversion[0]['value'] = '';
  $node->field_units[0]['value'] = '';
  $node->field_summary[0]['value'] = '';
  $node->field_objects[0]['value'] = '';
  
  // delete old images
  if(is_array($node->field_image_file)) {
    foreach($node->field_image_file as $key => $value) {
      if(substr($node->field_image_file[$key]['title'], -7) == ' (auto)') {
        $node->field_image_file[$key]['flags']['delete'] = true;
      }
    }
  }
  
  // obtain model file
  $model = _brlcad_get_node_model($node);
  if(empty($model)) {
    return;  
  }
  
  // prepare environment variables
  $size = (int)variable_get('brlcad_raytrace_size', 512);
  $views = str_replace(array("\r\n", "\n"), ':', variable_get('brlcad_raytrace_ae', ''));
  $image = tempnam(realpath(file_directory_temp()), 'rtimg_');
  $objects = content_transpose_array_rows_cols($node->field_render_objects);
  $objects = empty($objects['value']) ? '*' : implode(' ', $objects['value']);
  $env = array(
    'image' => $image,
    'size' => $size,
    'views' => $views,
    'objects' => $objects, 
  );

  // run the script
  $script = drupal_get_path('module', 'brlcad') . '/scripts/' . variable_get('brlcad_version', '') . '/metadata.txt';
  $output = brlcad_run_mged_script($script, $model['filepath'], $env);
  unlink($image);
  unset($env);
  if(empty($output) ) {
    return;
  }
  
  // parse the output
  preg_match_all('|DATABASE:([^\n]+)\n(.+)\nDATABASE:\1|sm', $output, $fields);
  $fields = array_combine($fields[1], $fields[2]);
  
  // import metadata values 
  if(empty($node->field_title[0]['value'])) {
    $node->field_title[0]['value'] = isset($fields['TITLE']) ? trim($fields['TITLE']) : '';
  }
  $node->field_dbversion[0]['value'] = isset($fields['VERSION']) ? trim($fields['VERSION']) : '';
  $node->field_units[0]['value'] = isset($fields['UNITS']) ? trim($fields['UNITS']) : '';
  $node->field_summary[0]['value'] = isset($fields['SUMMARY']) ? $fields['SUMMARY'] : '';
  $node->field_objects[0]['value'] = isset($fields['OBJECTS']) ? preg_replace('| +|', ' ', $fields['OBJECTS']) : '';
  
  // import images
  $pixpngcmd = escapeshellcmd(variable_get('brlcad_bin_path', '/usr/brlcad/bin') . '/pix-png') . ' -s ' . $size . ' ';
  $views = explode(':', $views);
  foreach($views as $key => $view) {
    $pixfile = $image . $key . '.pix';
    if(file_exists($pixfile)) {
      $view = $views[$key];
      $pngfile = $image . $key . '.png';
      $cmd = $pixpngcmd  . escapeshellarg($pixfile) . '>' . escapeshellarg($pngfile);
      exec($cmd, $output, $return_var);
      unset($output);
      unlink($pixfile);
      if(!$return_var) {
        $node->field_image_file[] = array(
          'title' => 'View ' . $view . ' (auto)',
          'filename' => str_replace('.', '_', $model['filename']) . '_' . str_replace(' ', '_', $view) . '.png',
          'filepath' => $pngfile,
          'filemime' => file_get_mimetype($pngfile),
          'fid' => 'upload',
          'filesize' => filesize($pngfile),
        );
      } else {
        watchdog('brlcad', t('Failed to execute command %cmd.', array('%cmd' => $cmd)), WATCHDOG_ERROR);
      }
    }  
  }
}

function brlcad_load_api() {
  require_once(drupal_get_path('module', 'brlcad') . '/brlcad.inc');
}

/**
 * Parses the output of one or more BRLCAD's ls -l command. 
 *
 * @param string $text output from BRLCAD
 */
function brlcad_objects_list($text) {
  $text = explode("\n", $text);
  $objects = array();
  foreach($text as $line) {
    if(!preg_match('|^(.+) (\w+) (\d+) (\d+) (\d+)$|', $line, $line)) {
      continue;
    }
    // trim the type suffix for combinations and regions (/ or /R)
    if($suffix = strrpos($name, '/')) {
      $name = substr($name, 0, $suffix);
    }
    $objects[$line[1]] = $line[1] . ';' . $line[2];
  }
  return $objects;
}

function _brlcad_get_node_model(&$node) {
  if(!is_array($node->field_model_file)) {
    return false;
  }
  foreach($node->field_model_file as $value) {
    if(empty($value['delete']) && !empty($value['filepath']) && file_exists($value['filepath'])) {
      return $value;
    }
  }
  return false;
}

function _brlcad_fakeuser() {
  static $user;
  if(!isset($user)) {
    $user = (object)array('uid' => 1, 'roles' => array());
  }
  return $user;
}

function _brlcad_supported_versions() {
  static $supported;
  if(!isset($supported)) {
    $supported = glob(drupal_get_path('module', 'brlcad') . '/scripts/*');
    foreach($supported as $key => $value) {
      if(is_dir($value)) {
        $supported[$key] = basename($value);
      } else {
        unset($supported[$key]);
      }
    }
    if(!empty($supported)) {
      $supported = array_combine($supported, $supported);
    }
  }
  return $supported;
}

/**
 * Helper function to be used in CCK fields
 *
 * @return array
 */
function _brlcad_current_node_objects_list() {
  if(arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit' && ($node = node_load(arg(1)))) {
    return brlcad_objects_list($node->field_objects[0]['value']);
  }
}
