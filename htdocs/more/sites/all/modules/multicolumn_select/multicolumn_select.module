<?php
// $Id$

/**
 * @file
 * Defines multicolumn selection widget for text and numeric fields.
 */

/**
 * Implementation of hook_help().
 */
function multicolumn_select_help($section) {
  if (preg_match('|^admin/content/types/([^/]*)/fields/([^/]*)$|', $section, $matches)) {
    if (($field = content_fields($matches[2], $matches[1])) && $field['widget']['type'] == 'multicolumn_select') {
      $output = t('Create a list of options as a list in <strong>Allowed values</strong> or as an array in PHP code at the bottom of this page. These values will be the same for the %field in all content types. ', array('%field' => $field['widget']['label']));
      return $output;
    }
  }
}

/**
 * Implementation of hook_widget_info().
 */
function multicolumn_select_widget_info() {
  $option_types = array('text', 'number_integer', 'number_decimal');
  return array(
    'multicolumn_select' => array(
      'label' => t('Multicolum select'),
      'field types' => $option_types,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function multicolumn_select_widget_settings($op, &$widget) {
  switch($op) {
    case 'form':
      $form = array();
      $form['separator'] = array(
        '#type' => 'textfield',
        '#title' => t('Fields separator'),
        '#default_value' => isset($widget['separator']) ? $widget['separator'] : '',
        '#description' => t('The text entered here will be used to split the label of the options into multiple columns.'),
      );
      $form['headers'] = array(
        '#type' => 'textfield',
        '#title' => t('Fields headers'),
        '#default_value' => isset($widget['headers']) ? $widget['headers'] : '',
        '#description' => t('The text entered here will become the column headers.'),
      );
      $form['widths'] = array(
        '#type' => 'textfield',
        '#title' => t('Column widths'),
        '#default_value' => isset($widget['widths']) ? $widget['widths'] : '',
        '#description' => t('Enter the column widths (in characters) separated by commas. Use ,, to mark fields for which the width is computed automatically. Leave blank to compute automatically the widths of all fields.'),
      );
      $form['lines'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of lines'),
        '#default_value' => isset($widget['lines']) ? $widget['lines'] : '',
        '#description' => t('Enter the number of visible lines.'),
      );
      return $form;
    case 'save':
      return array('separator', 'headers', 'widths', 'lines');
  }
}
/**
 * Implementation of hook_widget().
 */
function multicolumn_select_widget($op, &$node, &$field, &$items) {
  switch ($op) {
    case 'form':
      $options = _multicolumn_select_options($field, $node);
      _multicolumn_select_format_options($field['widget'], $options);
      $default_values = content_transpose_array_rows_cols($items);
      $default_values = empty($default_values['value']) ? array() : $default_values['value'];
      
      $form = array();

      $form[$field['field_name']] = array('#tree' => TRUE);

      $form[$field['field_name']]['keys'] = array(
         '#type' => 'select',
         '#title' => t($field['widget']['label']),
         '#default_value' => $field['multiple'] ? $default_values : reset($default_values),
         '#multiple' => $field['multiple'],
         '#size' => isset($field['widget']['lines']) ? $field['widget']['lines'] : 6,
         '#options' => $options,
         '#required' => $field['required'],
         '#description' => content_filter_xss(t($field['widget']['description'])),
         '#attributes' => array('style' => 'font-family: monospace'),
      );
  
      return $form;

    case 'process form values':
      $keys = (array) $items['keys'];
      unset($items['keys']);
      
      // erase header if it was selected
      unset($keys['']);
      $keys = array_values($keys);
      
      $items = content_transpose_array_rows_cols(array('value' => $keys));
      break;
  }
}

function _multicolumn_select_options($field, $node) {
  $types = _content_field_types();
  $field_allowed_values = $types[$field['type']]['module'] .'_allowed_values';
  if (function_exists($field_allowed_values)) {
    $allowed_values = $field_allowed_values($field);
  }
  else {
    $allowed_values = array();
  }

  return $allowed_values;
}

/**
 * Formatter for the entries of the select widget.
 */
function _multicolumn_select_format_options(&$widget, &$options) {
  $separator = isset($widget['separator']) ? $widget['separator'] : '';
  if(!empty($widget['headers'])) {
    $options = array('' => $widget['headers']) + $options;
  }
  // compute number of columns and default column widths
  $widths = array();
  foreach($options as $key => $option) {
    $option = explode($separator, $option);
    $options[$key] = $option;
    foreach($option as $column => $text) {
      $widths[$column] = max(strlen($text), empty($widths[$column]) ? 0 : $widths[$column]); 
    }
  }
  // override default column width with user provided ones
  if(!empty($widget['widths'])) {
    foreach(explode(',', $widget['widths']) as $column => $width) {
      if($column >= count($widths)) {
        break;
      }
      if(is_numeric($width)) {
        $widths[$column] = $width;        
      }
    }
  }
  // prepare formating template
  $template = '';
  foreach($widths as $column => $width) {
    $template .= '%-' . (int)$width . '.' . (int)$width . 's';
    if($width > 0) {
      $template .= '|';
    }
  }
  $template = trim($template, '|');

  // format options
  foreach($options as $key => $option) {
    $options[$key] = vsprintf($template, $option);
  }
  // replace spaces with &nbsp;-es so the formating look ok.
  $options = str_replace(' ', decode_entities('&nbsp;'), $options);
}
